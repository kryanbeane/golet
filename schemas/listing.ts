import type { Database } from '@/types_db';
import { z } from 'zod';

// Enum value arrays from types_db
export const PROPERTY_TYPE_ENUM_VALUES = [
  'house', 'apartment', 'flat', 'studio', 'other',
] as const;
export const ROOM_TYPE_ENUM_VALUES = [
  'single', 'double', 'twin', 'shared', 'digs',
] as const;
export const AMENITY_TYPE_ENUM_VALUES = [
  'Wi-Fi', 'Parking', 'Garden Access', 'Balcony/Terrace', 'Washing Machine', 'Dryer', 'Dishwasher', 'Microwave', 'TV', 'Central Heating', 'Fireplace', 'Air Conditioning', 'Gym Access', 'Swimming Pool', 'Storage Space', 'Bike Storage', 'Furnished', 'Unfurnished', 'Pet Friendly', 'Smoking Allowed',
] as const;
export const BER_RATING_ENUM_VALUES = [
  'A1', 'A2', 'A3', 'B1', 'B2', 'B3', 'C1', 'C2', 'C3', 'D1', 'D2', 'E1', 'E2', 'F', 'G',
] as const;
export const LEASE_DURATION_ENUM_VALUES = [
  '1-month', '2-months', '3-months', '6-months', '12-months', 'flexible',
] as const;
export const RENT_FREQUENCY_ENUM_VALUES = [
  'weekly', 'monthly',
] as const;
export const NEARBY_FACILITY_ENUM_VALUES = [
  'Bus Stop', 'Train Station', 'DART Station', 'Luas Stop', 'Airport', 'Ferry Terminal', 'Bike Share Station', 'Taxi Rank', 'Shopping Centre', 'Supermarket', 'Convenience Store', 'Pharmacy', 'Post Office', 'Bank', 'ATM', 'Laundromat', 'Dry Cleaners', 'Hardware Store', 'Hospital', 'GP Clinic', 'Dental Clinic', 'Walk-in Clinic', 'Veterinary Clinic', 'Primary School', 'Secondary School', 'University/College', 'Library', 'Creche/Childcare', 'Language School', 'Restaurant/Café', 'Pub', 'Takeaway', 'Coffee Shop', 'Bakery', 'Grocery Market', 'Gym/Fitness Centre', 'Park', 'Beach', 'Swimming Pool', 'Sports Complex', 'Cinema', 'Theatre', 'Museum', 'Art Gallery', 'Golf Course', 'Tennis Courts', 'Playground', 'Church', 'Mosque', 'Temple', 'Community Centre', 'Garda Station', 'Fire Station', 'Petrol Station', 'Car Park', 'Electric Car Charging',
] as const;

// Enum schemas using value arrays
export const propertyTypeSchema = z.enum(PROPERTY_TYPE_ENUM_VALUES);
export const roomTypeSchema = z.enum(ROOM_TYPE_ENUM_VALUES);
export const amenityTypeSchema = z.enum(AMENITY_TYPE_ENUM_VALUES);
export const berRatingSchema = z.enum(BER_RATING_ENUM_VALUES);
export const leaseDurationSchema = z.enum(LEASE_DURATION_ENUM_VALUES);
export const rentFrequencySchema = z.enum(RENT_FREQUENCY_ENUM_VALUES);
export const nearbyFacilitySchema = z.enum(NEARBY_FACILITY_ENUM_VALUES);

/**
 * Zod schema for a complete property listing
 */
export const listingSchema = z.object({
  // Basic Information
  id: z.string().uuid().optional(), // Auto-generated
  property_name: z.string().min(1, 'Property name is required'), // Auto-generated by trigger
  property_type: propertyTypeSchema,
  room_type: roomTypeSchema,
  ensuite: z.boolean().default(false),
  
  // Location
  address: z.string().optional().default(''), // Street address (optional - can use map click)
  apartment_number: z.string().nullable().default(null),
  area: z.string().default(''),
  city: z.string().optional().default(''), // Make city optional too
  county: z.string().optional().default(''), // Make county optional too
  eircode: z.string().optional().default(''), // Make eircode optional too
  
  // Pricing & Terms
  monthly_rent: z.number().positive('Monthly rent must be positive'),
  rent_frequency: rentFrequencySchema.default(RENT_FREQUENCY_ENUM_VALUES[0]),
  security_deposit: z.number().nonnegative('Security deposit cannot be negative'),
  lease_duration: leaseDurationSchema.default(LEASE_DURATION_ENUM_VALUES[0]),
  available_from: z.string().or(z.date()).transform(val => 
    typeof val === 'string' ? val : val.toISOString().split('T')[0]
  ).default(''),
  
  // Property Details
  size: z.number().positive('Size must be positive').nullable().default(null), // in m²
  description: z.string().min(10, 'Description must be at least 10 characters'),
  
  // Current Occupants
  current_males: z.number().int().nonnegative().default(0),
  current_females: z.number().int().nonnegative().default(0),
  owner_occupied: z.boolean().default(false),
  pets: z.boolean().default(false),
  
  // BER Rating
  ber_rating: berRatingSchema.default(BER_RATING_ENUM_VALUES[0]),
  ber_cert_number: z.string().nullable().default(null),
  
  // Features
  amenities: z.array(amenityTypeSchema).default([]),
  nearby_facilities: z.array(nearbyFacilitySchema).default([]),
  
  // Rules & Additional Info
  house_rules: z.string().default(''),
  
  // Media (will be URLs/paths after upload)
  images: z.array(z.string()).default([]),
  videos: z.array(z.string()).default([]),
  
  // Status & Metadata
  active: z.boolean().default(false), // false = draft, true = published
  verified: z.boolean().default(false),
  user_id: z.string().uuid().nullable().default(null),
  
  // System fields (auto-managed)
  created_at: z.string().datetime().optional(),
  updated_at: z.string().datetime().optional(),

  // Geolocation
  lat: z.number().optional(),
  lng: z.number().optional(),
  
  // Application Management (typically not set on creation)
  applicants: z.array(z.any()).default([]),
  available: z.string().nullable().default(null),
  viewing_times: z.array(z.string()).nullable().default(null),
});

// Schema for creating a new listing (some fields are optional or auto-generated)
export const createListingSchema = listingSchema.omit({
  id: true,
  property_name: true, // Auto-generated by trigger
  created_at: true,
  updated_at: true,
  verified: true,
  applicants: true,
});

// Schema for updating a listing
export const updateListingSchema = listingSchema.partial().omit({
  id: true,
  user_id: true, // Can't change owner
  created_at: true,
});

// TypeScript types
export type Listing = z.infer<typeof listingSchema>;
export type CreateListing = z.infer<typeof createListingSchema>;
export type UpdateListing = z.infer<typeof updateListingSchema>;
export type AmenityType = z.infer<typeof amenityTypeSchema>;
export type BerRating = z.infer<typeof berRatingSchema>;
export type LeaseDuration = z.infer<typeof leaseDurationSchema>;
export type NearbyFacility = z.infer<typeof nearbyFacilitySchema>;
export type PropertyType = z.infer<typeof propertyTypeSchema>;
export type RentFrequency = z.infer<typeof rentFrequencySchema>;
export type RoomType = z.infer<typeof roomTypeSchema>;